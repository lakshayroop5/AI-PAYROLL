// Prisma schema for AI Payroll System
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  roles                   String   @default("") // JSON string of roles array
  selfVerificationStatus  Boolean  @default(false)
  selfVerificationId      String?
  selfVerifiedAt         DateTime?
  githubLogin            String?  @unique
  githubId               String?
  githubAccessToken      String?
  managerWalletAddress   String?  // Manager's wallet for receiving corporate payments
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  // Relations
  contributorProfile     Contributor?
  managedRepos          Repository[]
  createdRuns           PayrollRun[]
  accounts              Account[]
  sessions              Session[]
  donations             Donation[]
  donationPage          DonationPage?
  
  @@map("users")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Contributor {
  id                    String   @id @default(cuid())
  userId                String   @unique
  hederaAccountId       String
  tokenAssociations     String   @default("") // JSON string of token IDs array
  active                Boolean  @default(true)
  minPayoutThreshold    Float?
  maxPayoutCap          Float?
  githubHandle          String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  // Relations
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payouts              Payout[]
  
  @@map("contributors")
}

model Repository {
  id                   String   @id @default(cuid())
  owner               String
  name                String
  fullName            String   @unique // "owner/name"
  managerId           String
  permissions         String   // JSON snapshot of permissions
  includeLabels       String   @default("") // JSON string of labels to include
  excludeLabels       String   @default("") // JSON string of labels to exclude
  defaultBudgetUsd    Float?
  defaultAsset        String?
  active              Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  manager            User       @relation(fields: [managerId], references: [id])
  runs               PayrollRun[]
  agent              RepoAgent?
  automatedPayroll   AutomatedPayroll[]
  donations          Donation[]
  
  @@map("repositories")
}

model PayrollRun {
  id                  String   @id @default(cuid())
  runNumber          Int      @default(1)
  repoIds            String   @default("") // JSON string of repository IDs array
  startDate          DateTime
  endDate            DateTime
  distributionMode   String   @default("PR_COUNT_PROPORTIONAL")
  usdBudget          Float
  asset              String   // "HBAR" or token ID
  pythFeedId         String
  priceSnapshot      String   // JSON: {value, timestamp, confidence}
  status             String   @default("PENDING") // PENDING, PREVIEW_READY, APPROVED, EXECUTING, COMPLETED, FAILED
  previewHash        String?
  executionHash      String?
  environment        String   @default("testnet") // "testnet" or "mainnet"
  createdById        String
  startedAt          DateTime?
  finishedAt         DateTime?
  totalPrCount       Int      @default(0)
  totalPayouts       Int      @default(0)
  successfulPayouts  Int      @default(0)
  failedPayouts      Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Relations
  createdBy          User       @relation(fields: [createdById], references: [id])
  repositories       Repository[]
  runItems           RunItem[]
  payouts            Payout[]
  artifacts          Artifact[]
  
  @@map("payroll_runs")
}

model RunItem {
  id              String     @id @default(cuid())
  runId           String
  repo            String     // "owner/name"
  prNumber        Int
  authorLogin     String
  authorId        String?
  mergedAt        DateTime
  title           String
  labels          String     @default("") // JSON string of PR labels array
  linesAdded      Int?
  linesDeleted    Int?
  filesChanged    Int?
  weight          Float      @default(1.0)
  contributorId   String?
  createdAt       DateTime   @default(now())
  
  // Relations
  run             PayrollRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  
  @@unique([runId, repo, prNumber])
  @@map("run_items")
}

model Payout {
  id                String     @id @default(cuid())
  runId             String
  contributorId     String
  prCount           Int        // Number of merged PRs for this contributor
  shareRatio        Float      // Proportion of total distribution
  usdAmount         Float      // USD amount allocated
  nativeAmount      String     // Native amount in smallest unit (tinybar, etc.)
  decimals          Int        // Decimal places for the asset
  txId              String?    // Transaction ID for direct transfers
  scheduleId        String?    // Schedule ID for scheduled transactions
  status            String     @default("PENDING") // PENDING, SUBMITTED, CONFIRMED, FAILED
  error             String?    // Error message if failed
  submittedAt       DateTime?
  confirmedAt       DateTime?
  idempotencyKey    String     @unique // Prevents double payments
  mirrorNodeUrl     String?    // Link to mirror node transaction
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  // Relations
  run               PayrollRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  contributor       Contributor @relation(fields: [contributorId], references: [id])
  
  @@unique([runId, contributorId])
  @@map("payouts")
}

model Artifact {
  id              String     @id @default(cuid())
  runId           String
  type            String     // "csv" or "json"
  filename        String
  cid             String     // Lighthouse CID
  size            Int        // File size in bytes
  verified        Boolean    @default(false) // CID health check status
  lastCheckedAt   DateTime?
  createdAt       DateTime   @default(now())
  
  // Relations
  run             PayrollRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  
  @@map("artifacts")
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String   // Action performed
  resource    String?  // Resource affected (run ID, user ID, etc.)
  details     String   // JSON details of the action
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@map("audit_logs")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   // JSON value
  description String?
  updatedAt   DateTime @updatedAt
  
  @@map("system_config")
}

// Monitoring and Analytics Models
model RepoAgent {
  id                String   @id @default(cuid())
  repositoryId      String   @unique
  agentId           String?  // External agent ID (ASI/Fetch.ai)
  status            String   @default("INITIALIZING") // INITIALIZING, ACTIVE, PAUSED, ERROR, STOPPED
  subgraphUrl       String?  // The Graph subgraph endpoint
  lastSyncAt        DateTime?
  syncInterval      Int      @default(3600) // Seconds between syncs (default 1 hour)
  errorCount        Int      @default(0)
  lastError         String?
  metadata          String   @default("{}") // JSON metadata about agent config
  activatedAt       DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  repository        Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  analytics         RepoAnalytics[]
  corporateUsers    CorporateUser[]
  invoices          Invoice[]
  
  @@map("repo_agents")
}

model RepoAnalytics {
  id                String   @id @default(cuid())
  agentId           String
  date              DateTime // Date for this analytics snapshot
  totalContributors Int      @default(0)
  totalPRs          Int      @default(0)
  totalCommits      Int      @default(0)
  totalStars        Int      @default(0)
  totalForks        Int      @default(0)
  totalClones       Int      @default(0)
  totalViews        Int      @default(0)
  newContributors   Int      @default(0)
  activeContributors Int     @default(0)
  corporateActivity Int      @default(0) // Detected corporate usage signals
  contributorStats  String   @default("{}") // JSON: detailed per-contributor stats
  rawData          String    @default("{}") // JSON: raw analytics data from sources
  createdAt        DateTime  @default(now())
  
  // Relations
  agent            RepoAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  
  @@unique([agentId, date])
  @@map("repo_analytics")
}

model CorporateUser {
  id                String   @id @default(cuid())
  agentId           String
  organizationName  String?
  domain            String?
  githubLogin       String?
  githubOrgId       String?
  email             String?
  detectionMethod   String   // "domain", "org_membership", "usage_pattern", "manual"
  confidence        Float    @default(0.0) // 0-1 confidence score
  firstDetected     DateTime @default(now())
  lastActivity      DateTime @default(now())
  totalActivity     Int      @default(0)
  usageMetrics      String   @default("{}") // JSON: clones, views, API calls, etc.
  status            String   @default("DETECTED") // DETECTED, VERIFIED, INVOICED, PAID, BLOCKED
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  agent             RepoAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  invoices          Invoice[]
  
  @@unique([agentId, githubLogin])
  @@map("corporate_users")
}

model Invoice {
  id                String   @id @default(cuid())
  invoiceNumber     String   @unique
  agentId           String
  corporateUserId   String?
  organizationName  String
  amount            Float    // USD amount
  currency          String   @default("USD")
  period            String   // Billing period description
  dueDate           DateTime
  status            String   @default("PENDING") // PENDING, SENT, PAID, OVERDUE, CANCELLED
  paymentMethod     String?  // Expected payment method
  walletAddress     String?  // Crypto wallet for payment
  usageData         String   @default("{}") // JSON: usage breakdown
  pdfPath           String?  // Path to generated PDF
  emailSent         Boolean  @default(false)
  emailSentAt       DateTime?
  paidAmount        Float?
  paidAt            DateTime?
  transactionHash   String?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  agent             RepoAgent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  corporateUser     CorporateUser? @relation(fields: [corporateUserId], references: [id])
  payments          Payment[]
  
  @@map("invoices")
}

model Payment {
  id                String   @id @default(cuid())
  invoiceId         String
  amount            Float
  currency          String   @default("USD")
  cryptoAmount      String?  // Amount in crypto
  cryptoCurrency    String?  // HBAR, MATIC, etc.
  transactionHash   String   @unique
  blockNumber       String?
  fromAddress       String
  toAddress         String
  network           String   // "hedera-testnet", "polygon", etc.
  status            String   @default("PENDING") // PENDING, CONFIRMED, FAILED
  confirmations     Int      @default(0)
  gasUsed           String?
  gasFee            String?
  detectedAt        DateTime @default(now())
  confirmedAt       DateTime?
  metadata          String   @default("{}") // JSON: additional payment data
  
  // Relations
  invoice           Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model AutomatedPayroll {
  id                String   @id @default(cuid())
  repositoryId      String
  ruleName          String   @default("default")
  frequency         String   @default("weekly") // daily, weekly, monthly
  distributionRule  String   @default("PR_COUNT_PROPORTIONAL")
  minimumAmount     Float    @default(0)
  maximumAmount     Float?
  enabled           Boolean  @default(false)
  lastRunAt         DateTime?
  nextRunAt         DateTime?
  totalRuns         Int      @default(0)
  successfulRuns    Int      @default(0)
  failedRuns        Int      @default(0)
  lastError         String?
  configuration     String   @default("{}") // JSON: detailed config
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  repository        Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@map("automated_payroll")
}

model NotificationQueue {
  id                String   @id @default(cuid())
  type              String   // "email", "webhook", "in_app"
  recipient         String   // Email or user ID
  subject           String?
  content           String   // Email body or notification content
  templateId        String?
  templateData      String   @default("{}") // JSON: template variables
  priority          Int      @default(0) // Higher = more priority
  status            String   @default("PENDING") // PENDING, SENT, FAILED, CANCELLED
  attempts          Int      @default(0)
  maxAttempts       Int      @default(3)
  lastAttempt       DateTime?
  scheduledFor      DateTime @default(now())
  sentAt            DateTime?
  error             String?
  metadata          String   @default("{}") // JSON: additional data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("notification_queue")
}

model Donation {
  id                String   @id @default(cuid())
  repositoryId      String?  // Optional: donation for specific repo
  managerId         String   // Manager receiving the donation
  companyName       String?  // Name of donating company
  donorEmail        String?  // Donor contact email
  amount            Float    // Amount in USD
  currency          String   @default("PYUSD") // PYUSD, HBAR, ETH, etc.
  cryptoAmount      String?  // Amount in crypto units
  transactionHash   String?  // Blockchain transaction hash
  paymentMethod     String   @default("PYUSD") // PYUSD, PayPal, Crypto
  status            String   @default("PENDING") // PENDING, CONFIRMED, FAILED, CANCELLED
  message           String?  // Optional message from donor
  qrCodeGenerated   Boolean  @default(false)
  paymentAddress    String?  // Wallet address used for payment
  network           String   @default("testnet") // testnet, mainnet
  confirmedAt       DateTime?
  metadata          String   @default("{}") // JSON: additional payment data
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  manager           User     @relation(fields: [managerId], references: [id])
  repository        Repository? @relation(fields: [repositoryId], references: [id])
  
  @@map("donations")
}

model DonationPage {
  id                String   @id @default(cuid())
  managerId         String   @unique // One donation page per manager
  slug              String   @unique // URL slug for the donation page
  pageTitle         String   @default("Support Our Open Source Work")
  description       String?  // Custom description for the donation page
  isActive          Boolean  @default(true)
  acceptedCurrencies String  @default("[\"PYUSD\", \"PayPal\"]") // JSON array of accepted currencies
  minimumAmount     Float?   // Minimum donation amount
  maximumAmount     Float?   // Maximum donation amount
  customMessage     String?  // Custom thank you message
  logoUrl           String?  // Custom logo for the page
  themeColor        String   @default("#0052CC") // Hex color for theme
  totalDonations    Float    @default(0) // Total donations received
  donationCount     Int      @default(0) // Number of donations
  lastDonationAt    DateTime? // Last donation timestamp
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  manager           User     @relation(fields: [managerId], references: [id])
  
  @@map("donation_pages")
}
